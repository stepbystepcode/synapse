{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/AgentTaskManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title AgentTaskManager\n * @dev AI Agent 任务市场合约\n * 实现任务创建、接受、完成、审核和支付的核心逻辑\n */\ncontract AgentTaskManager is ReentrancyGuard, Ownable {\n    // 任务状态枚举\n    enum TaskState { Open, InProgress, Completed, Approved }\n    \n    // 任务结构体\n    struct Task {\n        uint256 id;\n        address creator;    // 老板 Agent\n        address worker;     // 工作 Agent  \n        string prompt;      // 任务描述，例如图片生成的提示词\n        string resultURI;   // 工作成果的链接 (例如图片 URL)\n        uint256 reward;     // 奖励金额 (使用 ERC20 稳定币)\n        TaskState state;    // 任务状态\n        uint256 createdAt;  // 创建时间\n        uint256 updatedAt;  // 更新时间\n    }\n    \n    // 状态变量\n    IERC20 public immutable stablecoin;  // 稳定币合约地址\n    Task[] public tasks;                 // 存储所有任务的数组\n    mapping(address => uint256[]) public creatorTasks;  // 创建者的任务映射\n    mapping(address => uint256[]) public workerTasks;   // 工作者的任务映射\n    \n    // 事件\n    event TaskCreated(uint256 indexed taskId, address indexed creator, string prompt, uint256 reward);\n    event TaskAccepted(uint256 indexed taskId, address indexed worker);\n    event TaskCompleted(uint256 indexed taskId, string resultURI);\n    event TaskApproved(uint256 indexed taskId, address indexed worker, uint256 reward);\n    event PaymentSent(address indexed to, uint256 amount);\n    \n    // 错误定义\n    error TaskNotFound();\n    error TaskNotOpen();\n    error TaskNotInProgress();\n    error TaskNotCompleted();\n    error NotTaskCreator();\n    error NotTaskWorker();\n    error InsufficientAllowance();\n    error TransferFailed();\n    error InvalidReward();\n    error InvalidPrompt();\n    \n    /**\n     * @dev 构造函数\n     * @param _stablecoin 稳定币合约地址\n     */\n    constructor(address _stablecoin) Ownable(msg.sender) {\n        require(_stablecoin != address(0), \"Invalid stablecoin address\");\n        stablecoin = IERC20(_stablecoin);\n    }\n    \n    /**\n     * @dev 创建任务\n     * @param _prompt 任务描述\n     * @param _reward 奖励金额\n     */\n    function createTask(string memory _prompt, uint256 _reward) external nonReentrant {\n        if (bytes(_prompt).length == 0) revert InvalidPrompt();\n        if (_reward == 0) revert InvalidReward();\n        \n        // 检查授权额度\n        if (stablecoin.allowance(msg.sender, address(this)) < _reward) {\n            revert InsufficientAllowance();\n        }\n        \n        // 转移资金到合约\n        if (!stablecoin.transferFrom(msg.sender, address(this), _reward)) {\n            revert TransferFailed();\n        }\n        \n        // 创建新任务\n        uint256 taskId = tasks.length;\n        Task memory newTask = Task({\n            id: taskId,\n            creator: msg.sender,\n            worker: address(0),\n            prompt: _prompt,\n            resultURI: \"\",\n            reward: _reward,\n            state: TaskState.Open,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp\n        });\n        \n        tasks.push(newTask);\n        creatorTasks[msg.sender].push(taskId);\n        \n        emit TaskCreated(taskId, msg.sender, _prompt, _reward);\n    }\n    \n    /**\n     * @dev 接受任务\n     * @param _taskId 任务ID\n     */\n    function acceptTask(uint256 _taskId) external {\n        if (_taskId >= tasks.length) revert TaskNotFound();\n        \n        Task storage task = tasks[_taskId];\n        if (task.state != TaskState.Open) revert TaskNotOpen();\n        if (task.creator == msg.sender) revert NotTaskCreator(); // 创建者不能接受自己的任务\n        \n        task.worker = msg.sender;\n        task.state = TaskState.InProgress;\n        task.updatedAt = block.timestamp;\n        \n        workerTasks[msg.sender].push(_taskId);\n        \n        emit TaskAccepted(_taskId, msg.sender);\n    }\n    \n    /**\n     * @dev 完成任务\n     * @param _taskId 任务ID\n     * @param _resultURI 结果链接\n     */\n    function completeTask(uint256 _taskId, string memory _resultURI) external {\n        if (_taskId >= tasks.length) revert TaskNotFound();\n        \n        Task storage task = tasks[_taskId];\n        if (task.state != TaskState.InProgress) revert TaskNotInProgress();\n        if (task.worker != msg.sender) revert NotTaskWorker();\n        if (bytes(_resultURI).length == 0) revert InvalidPrompt();\n        \n        task.resultURI = _resultURI;\n        task.state = TaskState.Completed;\n        task.updatedAt = block.timestamp;\n        \n        emit TaskCompleted(_taskId, _resultURI);\n    }\n    \n    /**\n     * @dev 审核并支付任务\n     * @param _taskId 任务ID\n     */\n    function approveTask(uint256 _taskId) external nonReentrant {\n        if (_taskId >= tasks.length) revert TaskNotFound();\n        \n        Task storage task = tasks[_taskId];\n        if (task.state != TaskState.Completed) revert TaskNotCompleted();\n        if (task.creator != msg.sender) revert NotTaskCreator();\n        \n        task.state = TaskState.Approved;\n        task.updatedAt = block.timestamp;\n        \n        // 支付奖励给工作者\n        if (!stablecoin.transfer(task.worker, task.reward)) {\n            revert TransferFailed();\n        }\n        \n        emit TaskApproved(_taskId, task.worker, task.reward);\n        emit PaymentSent(task.worker, task.reward);\n    }\n    \n    // ========== 查询函数 ==========\n    \n    /**\n     * @dev 获取任务详情\n     * @param _taskId 任务ID\n     * @return 任务详情\n     */\n    function getTask(uint256 _taskId) external view returns (Task memory) {\n        if (_taskId >= tasks.length) revert TaskNotFound();\n        return tasks[_taskId];\n    }\n    \n    /**\n     * @dev 获取任务总数\n     * @return 任务总数\n     */\n    function getTaskCount() external view returns (uint256) {\n        return tasks.length;\n    }\n    \n    /**\n     * @dev 获取用户创建的任务ID列表\n     * @param _creator 创建者地址\n     * @return 任务ID数组\n     */\n    function getTasksByCreator(address _creator) external view returns (uint256[] memory) {\n        return creatorTasks[_creator];\n    }\n    \n    /**\n     * @dev 获取用户接受的任务ID列表\n     * @param _worker 工作者地址\n     * @return 任务ID数组\n     */\n    function getTasksByWorker(address _worker) external view returns (uint256[] memory) {\n        return workerTasks[_worker];\n    }\n    \n    /**\n     * @dev 获取所有任务（分页）\n     * @param _offset 偏移量\n     * @param _limit 限制数量\n     * @return 任务数组\n     */\n    function getAllTasks(uint256 _offset, uint256 _limit) external view returns (Task[] memory) {\n        uint256 totalTasks = tasks.length;\n        if (_offset >= totalTasks) {\n            return new Task[](0);\n        }\n        \n        uint256 end = _offset + _limit;\n        if (end > totalTasks) {\n            end = totalTasks;\n        }\n        \n        uint256 resultLength = end - _offset;\n        Task[] memory result = new Task[](resultLength);\n        \n        for (uint256 i = 0; i < resultLength; i++) {\n            result[i] = tasks[_offset + i];\n        }\n        \n        return result;\n    }\n    \n    // ========== 权限检查函数 ==========\n    \n    /**\n     * @dev 检查用户是否为任务创建者\n     * @param _taskId 任务ID\n     * @param _user 用户地址\n     * @return 是否为创建者\n     */\n    function isTaskCreator(uint256 _taskId, address _user) external view returns (bool) {\n        if (_taskId >= tasks.length) return false;\n        return tasks[_taskId].creator == _user;\n    }\n    \n    /**\n     * @dev 检查用户是否为任务工作者\n     * @param _taskId 任务ID\n     * @param _user 用户地址\n     * @return 是否为工作者\n     */\n    function isTaskWorker(uint256 _taskId, address _user) external view returns (bool) {\n        if (_taskId >= tasks.length) return false;\n        return tasks[_taskId].worker == _user;\n    }\n    \n    /**\n     * @dev 检查任务是否可被接受\n     * @param _taskId 任务ID\n     * @param _user 用户地址\n     * @return 是否可接受\n     */\n    function canAcceptTask(uint256 _taskId, address _user) external view returns (bool) {\n        if (_taskId >= tasks.length) return false;\n        Task memory task = tasks[_taskId];\n        return task.state == TaskState.Open && task.creator != _user;\n    }\n    \n    /**\n     * @dev 检查任务是否可被完成\n     * @param _taskId 任务ID\n     * @param _user 用户地址\n     * @return 是否可完成\n     */\n    function canCompleteTask(uint256 _taskId, address _user) external view returns (bool) {\n        if (_taskId >= tasks.length) return false;\n        Task memory task = tasks[_taskId];\n        return task.state == TaskState.InProgress && task.worker == _user;\n    }\n    \n    /**\n     * @dev 检查任务是否可被审核\n     * @param _taskId 任务ID\n     * @param _user 用户地址\n     * @return 是否可审核\n     */\n    function canApproveTask(uint256 _taskId, address _user) external view returns (bool) {\n        if (_taskId >= tasks.length) return false;\n        Task memory task = tasks[_taskId];\n        return task.state == TaskState.Completed && task.creator == _user;\n    }\n    \n    // ========== 紧急函数 ==========\n    \n    /**\n     * @dev 紧急提取合约中的稳定币（仅所有者）\n     * @param _amount 提取金额\n     */\n    function emergencyWithdraw(uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(_amount <= stablecoin.balanceOf(address(this)), \"Insufficient balance\");\n        \n        if (!stablecoin.transfer(owner(), _amount)) {\n            revert TransferFailed();\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}