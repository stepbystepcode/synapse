{
  "language": "Solidity",
  "sources": {
    "contracts/AgentPayment.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title AgentPayment\n * @dev 一个简单的代理支付合约，用于演示部署到 Monad 测试链\n */\ncontract AgentPayment {\n    // 事件\n    event PaymentReceived(address indexed from, uint256 amount, string message);\n    event PaymentWithdrawn(address indexed to, uint256 amount);\n    \n    // 状态变量\n    address public owner;\n    uint256 public totalPayments;\n    mapping(address => uint256) public userPayments;\n    \n    // 修饰符\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n    \n    // 构造函数\n    constructor(address initialOwner) {\n        owner = initialOwner;\n    }\n    \n    /**\n     * @dev 接收支付\n     * @param message 支付消息\n     */\n    function makePayment(string memory message) external payable {\n        require(msg.value > 0, \"Payment amount must be greater than 0\");\n        \n        totalPayments += msg.value;\n        userPayments[msg.sender] += msg.value;\n        \n        emit PaymentReceived(msg.sender, msg.value, message);\n    }\n    \n    /**\n     * @dev 获取合约余额\n     */\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    /**\n     * @dev 获取用户总支付金额\n     */\n    function getUserTotalPayment(address user) external view returns (uint256) {\n        return userPayments[user];\n    }\n    \n    /**\n     * @dev 提取合约中的资金（仅所有者）\n     */\n    function withdraw() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n        \n        (bool success, ) = payable(owner).call{value: balance}(\"\");\n        require(success, \"Withdrawal failed\");\n        \n        emit PaymentWithdrawn(owner, balance);\n    }\n    \n    /**\n     * @dev 接收 ETH\n     */\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}